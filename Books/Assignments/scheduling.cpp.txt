#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
};

void printGanttChart(const vector<pair<int, int>>& gantt) {
    cout << "Gantt Chart:" << endl;

    cout << "+";
    for (size_t i = 0; i < gantt.size(); ++i) {
        for (int j = 0; j < gantt[i].second; ++j) {
            cout << "-";
        }
        cout << "+";
    }
    cout << endl;

    cout << "|";
    for (size_t i = 0; i < gantt.size(); ++i) {
        cout << "P" << gantt[i].first << "|";
    }
    cout << endl;

    cout << "+";
    for (size_t i = 0; i < gantt.size(); ++i) {
        for (int j = 0; j < gantt[i].second; ++j) {
            cout << "-";
        }
        cout << "+";
    }
    cout << endl;

    cout << "Timeline: " << endl;
    int startTime = 0;
    for (size_t i = 0; i < gantt.size(); ++i) {
        cout << "P" << gantt[i].first << ": ";
        for (int j = 0; j < gantt[i].second; ++j) {
            cout << startTime++ << "-";
        }
        cout << startTime << endl;
    }
}
vector<pair<int, int>> sjfNonPreemptive(vector<Process>& processes) {
    sort(processes.begin(), processes.end(), [](const Process& a, const Process& b) {
        return a.arrival_time < b.arrival_time || (a.arrival_time == b.arrival_time && a.burst_time < b.burst_time);
    });

    vector<pair<int, int>> gantt;
    int currentTime = 0;

    for (const Process& p : processes) {
        if (currentTime < p.arrival_time) {
            currentTime = p.arrival_time;
        }
        gantt.push_back({p.id, p.burst_time});
        currentTime += p.burst_time;
    }

    return gantt;
}

