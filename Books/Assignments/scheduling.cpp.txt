#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
};

void printGanttChart(const vector<pair<int, int>>& gantt) {
    cout << "Gantt Chart:" << endl;

    cout << "+";
    for (size_t i = 0; i < gantt.size(); ++i) {
        for (int j = 0; j < gantt[i].second; ++j) {
            cout << "-";
        }
        cout << "+";
    }
    cout << endl;

    cout << "|";
    for (size_t i = 0; i < gantt.size(); ++i) {
        cout << "P" << gantt[i].first << "|";
    }
    cout << endl;

    cout << "+";
    for (size_t i = 0; i < gantt.size(); ++i) {
        for (int j = 0; j < gantt[i].second; ++j) {
            cout << "-";
        }
        cout << "+";
    }
    cout << endl;

    cout << "Timeline: " << endl;
    int startTime = 0;
    for (size_t i = 0; i < gantt.size(); ++i) {
        cout << "P" << gantt[i].first << ": ";
        for (int j = 0; j < gantt[i].second; ++j) {
            cout << startTime++ << "-";
        }
        cout << startTime << endl;
    }
}
vector<pair<int, int>> sjfNonPreemptive(vector<Process>& processes) {
    sort(processes.begin(), processes.end(), [](const Process& a, const Process& b) {
        return a.arrival_time < b.arrival_time || (a.arrival_time == b.arrival_time && a.burst_time < b.burst_time);
    });

    vector<pair<int, int>> gantt;
    int currentTime = 0;

    for (const Process& p : processes) {
        if (currentTime < p.arrival_time) {
            currentTime = p.arrival_time;
        }
        gantt.push_back({p.id, p.burst_time});
        currentTime += p.burst_time;
    }

    return gantt;
}

vector<pair<int, int>> sjfPreemptive(vector<Process>& processes) {
    sort(processes.begin(), processes.end(), [](const Process& a, const Process& b) {
        return a.arrival_time < b.arrival_time || (a.arrival_time == b.arrival_time && a.burst_time < b.burst_time);
    });

    vector<pair<int, int>> gantt;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // min heap

    int currentTime = 0;
    size_t completedProcesses = 0;

    while (completedProcesses < processes.size()) {
        for (size_t i = 0; i < processes.size(); ++i) {
            if (processes[i].arrival_time <= currentTime && processes[i].burst_time > 0) {
                pq.push({processes[i].burst_time, processes[i].id});
            }
        }

        if (!pq.empty()) {
            auto shortest = pq.top();
            pq.pop();

            gantt.push_back({shortest.second, 1});
            processes[shortest.second - 1].burst_time -= 1;
            currentTime += 1;

            if (processes[shortest.second - 1].burst_time == 0) {
                completedProcesses++;
            }
        } else {
            currentTime++;
            gantt.push_back({0, 1});
        }
    }

    return gantt;
}

vector<pair<int, int>> roundRobin(vector<Process>& processes, int quantum) {
    vector<pair<int, int>> gantt;
    queue<int> readyQueue;

    int currentTime = 0;
    int remainingProcesses = processes.size();
    int* remainingTime = new int[processes.size()];

    for (size_t i = 0; i < processes.size(); ++i) {
        readyQueue.push(processes[i].id);
        remainingTime[i] = processes[i].burst_time;
    }

    while (remainingProcesses > 0) {
        int currentProcess = readyQueue.front();
        readyQueue.pop();

        int executionTime = min(quantum, remainingTime[currentProcess - 1]);
        gantt.push_back({currentProcess, executionTime});

        remainingTime[currentProcess - 1] -= executionTime;
        currentTime += executionTime;

        for (size_t i = 0; i < processes.size(); ++i) {
            if (processes[i].arrival_time <= currentTime && remainingTime[i] > 0 && processes[i].id != currentProcess) {
                readyQueue.push(processes[i].id);
            }
        }

        if (remainingTime[currentProcess - 1] > 0) {
            readyQueue.push(currentProcess);
        } else {
            remainingProcesses--;
        }
    }

    delete[] remainingTime;
    return gantt;
}

